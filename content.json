{"meta":{"title":null,"subtitle":null,"description":"青は一番暖かい色","author":"heather","url":"https://github.com/HeatherIris"},"pages":[],"posts":[{"title":"","slug":"网络","date":"2018-05-06T10:03:13.813Z","updated":"2018-05-06T10:03:37.778Z","comments":true,"path":"2018/05/06/网络/","link":"","permalink":"https://github.com/HeatherIris/2018/05/06/网络/","excerpt":"","text":"title: 异步加载date: 2018-05-05 18:48:14tags: 网络##JavaScript异步加载JavaScript异步加载方案： defer异步加载&nbsp;&nbsp;&nbsp;&nbsp;在script标签的行间写一个defer=”defer”就可以让script变成异步加载，但只有等DOMTree全部解析完成后才会异步执行； async异步加载&nbsp;&nbsp;&nbsp;&nbsp;它是HTML5的属性（IE6-IE8不适用）。这种方法只能引用，不能把代码雪灾script标签里，且不能保证按顺序执行。 动态添加script标签，插入DOM中。 ##JavaScript加载时间线 创建document文档，开始解析web页面。解析完HTML元素和它们文本内容后添加Element对象和Text节点到文档中。在这个阶段document.readystate=’loading’。 遇到link外部css，创建线程加载，并继续解析文档。 遇到script外部js且没有设置async,defer,浏览器创建线程加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。 遇到script外部js，并且设置有async、defter，浏览器创建线程加载，并继续解析文档。对于async属性的脚本，脚本加载完成后立即执行。 遇到img等，先正常解析dom结构，然后浏览器异步加载src并继续解析文档。 在文档解析完成后，document.readyState = ‘interactive’。 文档解析完成后，所有设置有defer的脚本会按照顺序执行。 document对象会触发DOMContentLoaded事件，标志着从同步脚本执行阶段转为事件驱动阶段。 当所有async的脚本加载完成并执行后，img等加载完成后，document.readyState=’complete’，window对象触发load事件。 以异步的方式处理用户输入，网络事件等。","categories":[],"tags":[]},{"title":"异步加载","slug":"异步加载","date":"2018-05-05T10:48:14.000Z","updated":"2018-05-06T09:58:08.817Z","comments":true,"path":"2018/05/05/异步加载/","link":"","permalink":"https://github.com/HeatherIris/2018/05/05/异步加载/","excerpt":"","text":"##JavaScript异步加载 JavaScript异步加载方案： defer异步加载&nbsp;&nbsp;&nbsp;&nbsp;在script标签的行间写一个defer=”defer”就可以让script变成异步加载，但只有等DOMTree全部解析完成后才会异步执行； async异步加载&nbsp;&nbsp;&nbsp;&nbsp;它是HTML5的属性（IE6-IE8不适用）。这种方法只能引用，不能把代码雪灾script标签里，且不能保证按顺序执行。 动态添加script标签，插入DOM中。 ##JavaScript加载时间线 创建document文档，开始解析web页面。解析完HTML元素和它们文本内容后添加Element对象和Text节点到文档中。在这个阶段document.readystate=’loading’。 遇到link外部css，创建线程加载，并继续解析文档。 遇到script外部js且没有设置async,defer,浏览器创建线程加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。 遇到script外部js，并且设置有async、defter，浏览器创建线程加载，并继续解析文档。对于async属性的脚本，脚本加载完成后立即执行。 遇到img等，先正常解析dom结构，然后浏览器异步加载src并继续解析文档。 在文档解析完成后，document.readyState = ‘interactive’。 文档解析完成后，所有设置有defer的脚本会按照顺序执行。 document对象会触发DOMContentLoaded事件，标志着从同步脚本执行阶段转为事件驱动阶段。 当所有async的脚本加载完成并执行后，img等加载完成后，document.readyState=’complete’，window对象触发load事件。 以异步的方式处理用户输入，网络事件等。","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://github.com/HeatherIris/tags/网络/"}]},{"title":"一些记录","slug":"hello-world","date":"2017-10-07T04:04:10.760Z","updated":"2018-05-05T12:07:19.814Z","comments":true,"path":"2017/10/07/hello-world/","link":"","permalink":"https://github.com/HeatherIris/2017/10/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}